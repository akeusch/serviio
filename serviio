#!/bin/bash
#
# serviio       Serviio Startup Script for serviio version 1.6.2
#
# This script comes with no warranty. Use at your own risk.
# Copyright (C) 2015  Arthur Keusch
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# http://www.gnu.org/licenses/gpl-3.0.de.html
#
#
# chkconfig:   35 86 14
# description:  Simple script to start / stop the serviio mediaserver on CentOS 6.7
# by Arthur Keusch arthur.keusch@bluemail.ch
#
# Since at least Serviio 1.2 we need a home diretory to store java temp files
# /usr/local/serviio must have serviio as owner and group
# added var java_path seems serviio 1.3 need it
#
# Starting with version 1.6 the force stop/start function is implemented using kill -9 $pid
# 
# Source function library.
. /etc/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# enable debug
#set -x
exec="/usr/local/serviio/bin/serviio.sh" 
prog="serviio"
user="serviio"
home_dir="/home/$user"
count=0
ffmpeg_path="/usr/bin"
java_path="/opt/jdk1.8.0_45"

lockfile=/var/lock/subsys/$prog
pidfile=/var/run/$prog.pid


start() {
    [ -d $home_dir ] || exit 5
    [ -x $exec ] || exit 5
    echo -n "Starting Serviio media server: "
# if not running, start it up here, usually something like "daemon $exec"
    export PATH=$PATH:$ffmpeg_path:/usr/bin
    daemonize -u $user $exec  > /dev/null 2>1 &

    # Wait until serviio runs as user serviio

    while [ $count -lt 5 ]
    do
    PROC_RUN=$(ps -fu serviio | awk '{print $19}' |grep "Dserviio.home")

      if [ "$PROC_RUN" = "-Dserviio.home=/usr/local/serviio" ] ; then

      #PROC=$(ps -fu serviio | grep Xmx512M |  awk '{print $2}')
      PROC=$(ps -fu serviio | grep "Dserviio.home=/usr/local/serviio" |  awk '{print $2}')
        RETVALT=0
        touch $lockfile && echo -e '\033[58G' '\033[0;39m' "[" '\033[0;32m'  "OK" '\033[0;39m' "]" 
        echo $PROC > $pidfile
        break
      else
        count=`expr $count + 1 `
        sleep 5
	RETVALT=1
      fi
    done

    if  [ "$RETVALT" -ne "0" ] ; then
      echo -e '\033[58G' '\033[0;39m' "[" '\033[0;31m'  "FAIL" '\033[0;39m' "]" 
    fi
    return $RETVALT
}

stop() {
    echo -n "Stopping Serviio media server: "
    $exec -stop > /dev/null 2>1 &
    sleep 6
    PROC=$(ps -fu $user |grep $exec |head -n1| awk '{print $2}')
      if [ "$PROC" = "" ] ; then
       RETVALT=0
       rm -f $lockfile && rm -f $pidfile && echo -e '\033[58G' '\033[0;39m' "[" '\033[0;32m'  "OK" '\033[0;39m' "]"
      else
       RETVALT=1
       echo -e '\033[58G' '\033[0;39m' "[" '\033[0;31m'  "FAIL" '\033[0;39m' "]" 
      fi
    return $RETVALT
}

restart() {
    stop
    sleep 2
    start
}

reload() {
    restart
}

force_stop() {
    PROC=$(pgrep -u $user java)
    REVAL=$?
      if [ $REVAL -eq 0 ] ; then
        echo -n "Killing media server: "
    	kill -9 $PROC
    	REVAL=$? 
      	   if [ $REVAL -eq 0 ] ; then
             rm -f $lockfile && rm -f $pidfile && echo -e '\033[58G' '\033[0;39m' "[" '\033[0;32m'  "OK" '\033[0;39m' "]"
             RETVALT=0
           else
             RETVALT=1
             echo -e '\033[58G' '\033[0;39m' "[" '\033[0;31m'  "FAIL" '\033[0;39m' "]" 
           fi
      else
             echo "Serviio Media Server not running" 
             exit 0
      fi
    return $RETVALT
}

force_restart() {
    force_stop
    sleep 2
    start
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status $prog
}


case "$1" in
    start)
        $1
        ;;
    stop)
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        $1
        ;;
    force-stop)
        force_stop
        ;;
    force-restart)
        force_restart
        ;;
    status)
        rh_status
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|reload|force-restart|force-stop}"
        exit 2
esac
exit $?
